services:
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - proxy
  #   networks:
  #     - default

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  # Kafka UI - веб-интерфейс для мониторинга и управления Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Kafka topic initialization
  kafka-setup:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo Waiting for Kafka to be ready...
        cub kafka-ready -b kafka:9092 1 40
        echo Creating Kafka topics...
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic user_registration
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_like
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_view
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_comment
        echo Kafka topics created.
      "
  proxy:
    build: 
      dockerfile: ./proxy/Dockerfile
    command: uvicorn app:init_app --reload --host 0.0.0.0 --port 8000 --factory
    environment:
      PYTHONPATH : /app/proto:/app:/app/app
      SECRET_KEY : ${SECRET_KEY}
      ALGORITHM : ${ALGORITHM}
      AUTH_URL : "http://auth:8000"
      POSTS_GRPC_URL : "posts:50051"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./proxy/:/app/app/
    ports:
      - 8002:8000
    depends_on:
      - auth
      - posts
      - kafka-setup

  auth:
    build: 
      dockerfile: ./auth/Dockerfile
    entrypoint: ./auth_entrypoint.sh
    volumes:
      - ./auth/:/app/
    ports:
      - 8001:8000
    environment:
      DATABASE_URL : "postgresql+asyncpg://movie_db_username:movie_db_password@movie_db/movie_db_dev"
      SECRET_KEY : ${SECRET_KEY}
      ALGORITHM : ${ALGORITHM}
    depends_on:
      - movie_db

  movie_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_data_users:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=movie_db_username
      - POSTGRES_PASSWORD=movie_db_password
      - POSTGRES_DB=movie_db_dev
    ports:
      - "13500:5432"

  posts:
    build: 
      dockerfile: ./posts/Dockerfile
    entrypoint: ./app/posts_entrypoint.sh
    # entrypoint: ./auth_entrypoint.sh
    volumes:
      - ./posts/:/app/app/
    ports:
      - 50051:50051
      - 8003:8000
    environment:
      DATABASE_URL : ${POSTS_DATABASE_URL}
      PYTHONPATH : "/app/proto:/app:/app/app"
    depends_on:
      - posts_db

  posts_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_posts_users:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=posts_db_username
      - POSTGRES_PASSWORD=posts_db_password
      - POSTGRES_DB=posts_db_dev
    ports:
      - "13501:5432"

volumes:
  postgres_data_users:
  postgres_posts_users: