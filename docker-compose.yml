services:
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - proxy
  #   networks:
  #     - default

  # Zookeeper for Kafka
  e2e-tests:
    build:
      context: .
      dockerfile: ./e2e/Dockerfile
    depends_on:
      proxy:
        condition: service_healthy
      auth:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      AUTH_URL: "http://auth:8000"
      PROXY_URL: "http://proxy:8000"
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    logging:
      driver: none
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - ./kafka/log4j.properties:/etc/kafka/log4j.properties
    logging:
      driver: "none"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka UI - веб-интерфейс для мониторинга и управления Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      LOGGING_LEVEL_COM_PROVECTUS: WARN
    logging:
      driver: "none"

  # Kafka topic initialization
  kafka-setup:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo Waiting for Kafka to be ready...
        cub kafka-ready -b kafka:9092 1 40
        echo Creating Kafka topics...
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic user_registration
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_like
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_view
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_create
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_comment
        echo Kafka topics created.
      "
  proxy:
    build:
      dockerfile: ./proxy/Dockerfile
    command: uvicorn app:init_app --reload --host 0.0.0.0 --port 8000 --factory
    environment:
      PYTHONPATH: /app/proto:/app:/app/app
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      AUTH_URL: "http://auth:8000"
      POSTS_GRPC_URL: "posts:50051"
      STATS_GRPC_URL: "stats:50051"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./proxy/:/app/app/
    ports:
      - 8002:8000
    depends_on:
      - auth
      - posts
      - kafka-setup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    build:
      dockerfile: ./auth/Dockerfile
    entrypoint: ./auth_entrypoint.sh
    volumes:
      - ./auth/:/app/
    ports:
      - 8001:8000
    environment:
      DATABASE_URL: "postgresql+asyncpg://movie_db_username:movie_db_password@movie_db/movie_db_dev"
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
    depends_on:
      movie_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  movie_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_data_users:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=movie_db_username
      - POSTGRES_PASSWORD=movie_db_password
      - POSTGRES_DB=movie_db_dev
    ports:
      - "13500:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movie_db_username -d movie_db_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  posts:
    build:
      dockerfile: ./posts/Dockerfile
    entrypoint: ./app/posts_entrypoint.sh
    # entrypoint: ./auth_entrypoint.sh
    volumes:
      - ./posts/:/app/app/
    ports:
      - 50051:50051
      - 8003:8000
    environment:
      DATABASE_URL: ${POSTS_DATABASE_URL}
      PYTHONPATH: "/app/proto:/app:/app/app"
    depends_on:
      posts_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  posts_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_posts_users:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=posts_db_username
      - POSTGRES_PASSWORD=posts_db_password
      - POSTGRES_DB=posts_db_dev
    ports:
      - "13501:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U posts_db_username -d posts_db_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  stats:
    build:
      dockerfile: ./stats/Dockerfile
    entrypoint: ./app/stats_entrypoint.sh
    # entrypoint: ./auth_entrypoint.sh
    volumes:
      - ./stats/:/app/app/
    ports:
      - 50052:50052
      - 8004:8000
    environment:
      PYTHONPATH: "/app/proto:/app:/app/app"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: stats_db
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
    depends_on:
      - kafka
      - clickhouse

  clickhouse:
    image: yandex/clickhouse-server:latest
    container_name: clickhouse
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "8123:8123" # HTTP интерфейс
      - "9000:9000" # Native интерфейс
    environment:
      - CLICKHOUSE_DB=stats_db
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144

volumes:
  postgres_data_users:
  postgres_posts_users:
  clickhouse_data:
